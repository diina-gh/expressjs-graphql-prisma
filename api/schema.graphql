type Query {
  info: String!
  #Auth's Queries
  users(filter: String, page: Int, take: Int, orderBy: UserOrderByInput): PaginatedUser
  user(id: Int): UserResult
  #Newsletters's Queries
  newsletters(filter: String, page: Int, take: Int, orderBy: NewsletterOrderByInput): PaginatedNewsletter
  newsletter(id: Int): Newsletter
  #Categories's Queries
  categories(filter: String, page: Int, take: Int, orderBy: CategoryOrderByInput): PaginatedCategory
  subCategories(filter: String, page: Int, take: Int, orderBy: CategoryOrderByInput): PaginatedCategory
  category(id: Int): CategoryResult
  #Permission's Queries
  permissions(filter: String, page: Int, take: Int, orderBy: PermissionOrderByInput): PaginatedPermission
  permission(id: Int): PermissionResult
  #Permission's Queries
  roles(filter: String, page: Int, take: Int, orderBy: RoleOrderByInput): PaginatedRole
  role(id: Int): RoleResult
  #Variant's Queries
  variants(filter: String, page: Int, take: Int, orderBy: VariantOrderByInput): PaginatedVariant
  variant(id: Int): VariantResult
  #Option's Queries
  options(filter: String, page: Int, take: Int, orderBy: OptionOrderByInput): PaginatedOption
  option(id: Int): Option
  #Product's Queries
  products(filter: String, page: Int, take: Int, orderBy: ProductOrderByInput): PaginatedProduct
  product(id: Int): ProductResult
  #Discount's Queries
  discounts(filter: String, page: Int, take: Int, orderBy: DiscountOrderByInput): [Discount!]!
  discount(id: Int): Discount
  #Inventory's Queries
  inventories(filter: String, page: Int, take: Int, orderBy: InventoryOrderByInput): PaginatedInventory
  inventory(id: Int): Inventory
  #CartItems's Queries
  cartItems(filter: String, page: Int, take: Int, orderBy: CartItemOrderByInput): [CartItem!]!
  cartItem(id: Int): Inventory
  #Country's Queries
  countries(filter: String, page: Int, take: Int, orderBy: CountryOrderByInput): PaginatedCountry
  country(id: Int): CountryResult
  #Region's Queries
  regions(filter: String, page: Int, take: Int, orderBy: RegionOrderByInput): PaginatedRegion
  region(id: Int): RegionResult
  #District's Queries
  districts(filter: String, page: Int, take: Int, orderBy: DistrictOrderByInput): PaginatedDistrict
  district(id: Int): DistrictResult
  #DistrictsOnUser's Queries
  districtsOnUsers(filter: String, page: Int, take: Int, userId: Int, orderBy: DistrictsOnUsersOrderByInput): [DistrictsOnUsers!]!
  districtsOnUser(id: Int): DistrictsOnUsers
  #shippingMethods's Queries
  shippingMethods(filter: String, page: Int, take: Int, orderBy: ShippingMethodOrderByInput): PaginatedShippingMethod
  shippingMethod(id: Int): ShippingMethodResult
  #Order's Queries
  orders(filter: String, page: Int, take: Int, orderBy: OrderOrderByInput): [Order!]!
  order(id: Int): Order
  #Shipment's Queries
  shipmentStages(filter: String, page: Int, take: Int, orderBy: ShipmentStageOrderByInput): [ShipmentStage!]!
  shipmentStage(id: Int): ShipmentStage
  #Delivery Man's Queries
  deliveryMans(filter: String, page: Int, take: Int, orderBy: DeliveryManOrderByInput): PaginatedDeliveryMan
  deliveryMan(id: Int): DeliveryManResult
  #Brand's Queries
  brands(filter: String, page: Int, take: Int, orderBy: BrandOrderByInput): PaginatedBrand
  brand(id: Int): BrandResult
}

type Mutation {
  #Auth's Mutations
  saveUser(id: Int, firstname: String, lastname: String, email: String, password: String,repassword: String, phonenumber: String, roles:[Int] ): AuthPayloadResult
  login(email: String, password: String): UserResult
  deleteUser(id: Int): UserResult
  #Newsletter's mutations
  saveNewsletter(id:Int, email: String): Newsletter!
  deleteNewsletter(id:Int): Newsletter!
  #Category's mutations
  saveCategory(id:Int, name: String, desc: String, order: Int, activated: Boolean, parentId: Int, updatedat: String): CategoryResult!
  deleteCategory(id:Int): CategoryResult!
  #Permission's mutations
  savePermission(id:Int, name: String, desc:String): PermissionResult!
  deletePermission(id:Int): PermissionResult!
  #Role's mutations
  saveRole(id:Int, name: String, desc:String, permissions:[Int]): RoleResult!
  deleteRole(id:Int): RoleResult!
  #Variant's mutations
  saveVariant(id:Int, name: String, desc:String, options:[OptionInput]): VariantResult!
  deleteVariant(id:Int): VariantResult!
  #Product's mutations
  saveProduct(id:Int, name:String, desc: String, activated: Boolean, unit: String, unitweight: Float, unitprice: Float, order: Int, categoryId: Int, brandId: Int, variants:[Int], options:[Int], gender: Gender, relatives: [Int]): ProductResult!
  deleteProduct(id:Int): ProductResult!
  #Discount's mutations
  saveDiscount(id:Int, name: String, desc:String, percent: Float, products:[Int]): Discount!
  deleteDiscount(id:Int): Discount!
  #Discount's mutations
  saveInventory(id:Int, quantity:Int, productId:Int, details:String): Inventory!
  deleteInventory(id:Int): Inventory!
  #Discount's mutations
  saveCartItem(id: Int, unitprice: Float, discount: Float, quantity: Int, productId: Int, optionId: Int ): CartItem!
  deleteCartItem(id:Int): CartItem!
  #Country's mutations
  saveCountry(id: Int, iso3: String, isoNum: String, name: String): CountryResult!
  deleteCountry(id:Int): CountryResult!
  #Region's mutations
  saveRegion(id: Int, code: String, name: String, countryId: Int ): RegionResult!
  deleteRegion(id:Int): RegionResult!
  #District's mutations
  saveDistrict(id: Int, name: String, shipping: Float, regionId: Int ): DistrictResult!
  deleteDistrict(id:Int): DistrictResult!
  #DistrictsOnUsers's mutations
  saveDistrictsOnUsers(id: Int, userId: Int, districtId: Int, default: Boolean, line1: String, line2: String ): DistrictsOnUsers!
  deleteDistrictsOnUsers(id:Int): DistrictsOnUsers!
  #ShippingMethod's mutations
  saveShippingMethod(id: Int, code: String, name: String, desc: String ): ShippingMethodResult!
  deleteShippingMethod(id:Int): ShippingMethodResult!
  #Order's mutations
  saveOrder(id: Int, discount: Float, userId: Int, districtsOnUsersId: Int, shippingMethodId: Int, cartItems: [CartItemInput] ): Order!
  saveOrder2(id: Int, discount: Float, firstname: String, lastname: String, phonenumber: String, email: String, 
             line1: String, line2: String, districtId: Int ): Order!
  deleteOrder(id:Int): Order!
  #Shipment's mutations
  saveShipmentStage(id: Int, stage: String, desc: String, nextStageId: Int): ShipmentStage!
  deleteShipmentStage(id:Int): ShipmentStage!
  #Delivery Man's mutations
  saveDeliveryMan(id: Int, civility: Civility, firstname: String, lastname: String, phonenumber: String, email: String): DeliveryManResult!
  deleteDeliveryMan(id:Int): DeliveryManResult!
  #Brand's mutations
  saveBrand(id: Int, name: String, desc: String, order: Int, imageId: Int): BrandResult!
  deleteBrand(id:Int): BrandResult!
  #Brand's mutations
  saveImage(id: Int, url: String, imageref: String, default: Boolean, productId: Int, optionId: Int, brandId: Int, categoryId: Int, userId: Int): ImageResult!
  deleteImage(id:Int): ImageResult!
}


# Scalar

scalar Date
scalar Time
scalar DateTime


# Type definitions

type InputError{
  message: String
  input: String
  reason: String
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  email: String 
  token: String
  phonenumber: String
  firstname: String
  lastname: String
  emailVerified: Boolean
  enabled: Boolean
  lastlogin: Date
  password: String
  admin: Boolean
  vendor: Boolean
  roles: [RolesOnUsers]
  cart: Cart
  districts: [DistrictsOnUsers]
  orders: [Order]
  transactions: [Transaction]
  posts: [Post]
  comments: [Comment]
  notifications: [NotificationsOnUsers]
  image: Image
}

type PaginatedUser{
  count: Int
  users: [User]
}

union AuthPayloadResult = AuthPayload | InputError
union UserResult = User | InputError


type Role {
  id: ID!
  name: String
  desc: String
  RolesOnUsers: [RolesOnUsers]
  permissions: [PermissionsOnRoles]
}

type PaginatedRole{
  count: Int
  roles: [Role]
}

union RoleResult = Role | InputError

type Permission {
  id: ID!
  name: String
  desc: String
  createdat: Date
  updatedat: Date
  roles: [PermissionsOnRoles]
}

type PaginatedPermission{
  count: Int
  permissions: [Permission]
}

union PermissionResult = Permission | InputError

type RolesOnUsers {
  user: User
  userId: Int 
  role: Role
  roleId: Int 
  assignedAt: Date
  assignedById: Int
}

type PermissionsOnRoles {
  permission: Permission 
  permissionId: Int 
  role: Role
  roleId: Int 
  assignedAt: Date
  assignedById: Int
}

type Category{
  id: ID!
  name: String
  desc: String
  long_desc: String
  order: Int
  activated: Boolean
  createdat: Date
  updatedat: Date
  products: [Product]
  parent: Category
  parentId: Int
  childs: [Category]
  image: Image
}

type PaginatedCategory{
  count: Int
  countSub: Int
  categories: [Category]
}

union CategoryResult = Category | InputError

type Brand{
  id: Int
  name: String 
  desc: String
  order: Int
  createdat: DateTime
  updatedat: DateTime
  products: [Product]
  image: Image
}

type PaginatedBrand{
  count: Int
  brands: [Brand]
}

union BrandResult = Brand | InputError

type Product {
  id: ID!
  sku: String
  name: String
  desc: String
  details: String
  status: Int
  activated: Boolean
  unit: String
  unitweight: Float
  unitprice: Float
  taxable: Boolean
  ranking: Int
  order: Int
  likes: Int
  views: Int
  createdat: String
  updatedat: String 
  images: [Image]
  category: Category
  categoryId:Int
  brand: Brand
  brandId:Int
  discount: Discount
  discountId: Int
  variants: [VariantsOnProducts]
  options: [OptionsOnProducts]
  inventory: Inventory
  gender: Gender
  relatedId: Int
  related: Product
  relatives: [Product]
}

type PaginatedProduct{
  count: Int
  products: [Product]
}

union ProductResult = Product | InputError

type Inventory {
  id: ID!
  createdat: String
  updatedat: String 
  quantity: Int
  details: String
  product: Product
  productId: Int
}

type PaginatedInventory{
  count: Int
  inventories: [Inventory]
}

union InventoryResult = Inventory | InputError


type Discount {
  id: ID!
  name: String
  desc: String
  percent: Float
  enabled: Boolean
  createdat: Date
  updatedat: Date 
  products: [Product]
}

type Image {
  id: ID!
  url: String
  imageref: String
  default: Boolean
  product: Product
  productId: Int
  option: Option
  optionId: Int
  brand: Brand
  brandId: Int
  category: Category
  categoryId: Int
  user: User
  userId: Int
}

union ImageResult = Image | InputError

type VariantsOnProducts {
  product: Product
  productId: Int 
  variant: Variant
  variantId: Int 
  assignedAt: Date
}

type Variant {
  id: ID!
  name: String
  desc: String
  createdat: Date
  updatedat: Date 
  options: [Option]
  products: [VariantsOnProducts]
}

type PaginatedVariant{
  count: Int
  countOpt: Int
  variants: [Variant]
}

union VariantResult = Variant | InputError

type Option {
  id: ID!
  value: String
  colorCode: String
  variant: Variant
  variantId: Int
  products: [OptionsOnProducts]
  images: [Image]
}

type PaginatedOption{
  count: Int
  options: [Option]
}

union OptionResult = Option | InputError

type OptionsOnProducts {
  option: Option
  optionId: Int 
  product: Product
  productId: Int 
  assignedAt: Date
  cartItems: [CartItem]
  orderItems: [OrderItem]
}

type Newsletter {
  id: ID!
  email: String
  createdat: Date
}

type PaginatedNewsletter{
  count: Int
  newsletters: [Newsletter]
}

union NewsletterResult = Newsletter | InputError

type Cart {
  id: Int
  status: Int
  createdat: Date
  updatedat: Date
  cartItems: [CartItem]
  user: User
  userId: Int 
}

type CartItem {
  id: Int
  status: Int
  unitprice: Float
  discount: Float
  quantity: Int
  active: Boolean
  createdat: Date
  updatedat: Date
  product: Product
  productId: Int 
  cart: Cart
  cartId: Int 
  optionsOnProducts: OptionsOnProducts
  optionId: Int 
}

type Transaction{
  id: Int
  code: String
  type: Int
  mode: Int
  status: Int
  createdat: Date
  updatedat: Date
  user: User
  userId: Int 
  order: Order
  orderId: Int 
}

type Order{
  id: Int 
  token: String   
  status: Int
  subTotal: Float
  tax: Float
  total: Float
  promo: String
  discount: Float
  firstname: String
  lastname: String
  phonenumber: String
  email: String
  createdat: Date
  updatedat: Date
  user: User
  userId: Int 
  transactions: [Transaction]
  shipment: Shipment
  line1: String
  line2: String
  district: District
  districtId: Int
  orderItems: [OrderItem]
}

type OrderItem{
  id: Int
  order: Order
  orderId: Int
  product: Product
  productId: Int
  unitprice: Float
  quantity: Int
  discount: Float 
  createdat: Date
  updatedat: Date
  optionsOnProducts: OptionsOnProducts
  optionId: Int 
}

type ShippingMethod{
    id: Int
    code: String
    name: String
    desc: String
    orders: [Order]
}

type PaginatedShippingMethod{
  count: Int
  shippingMethods: [ShippingMethod]
}

union ShippingMethodResult = ShippingMethod | InputError

type DistrictsOnUsers{
  id: ID!
  user: User
  userId: Int 
  district: District
  districtId: Int 
  default: Boolean
  line1: String
  line2: String
  assignedAt: Date
}

type District{
  id: Int
  name: String
  shipping: Float
  region: Region
  regionId: Int 
  createdat: Date
  updatedat: Date
  orders: [Order]
  users: [DistrictsOnUsers]
}

type PaginatedDistrict{
  count: Int
  countRegions: Int
  countCountries: Int
  districts: [District]
}

union DistrictResult = District | InputError

type Region{
  id: Int
  code: String
  name: String
  createdat: Date
  updatedat: Date
  country: Country
  countryId: Int 
  districts: [District]
}

type PaginatedRegion{
  count: Int
  regions: [Region]
}

union RegionResult = Region | InputError

type Country{
  id: Int
  iso3: String  
  isoNum: String 
  name: String
  createdat: Date
  updatedat: Date
  regions: [Region]
}

type PaginatedCountry{
  count: Int
  countries: [Country]
}

union CountryResult = Country | InputError

type DeliveryMan{
  id: Int
  email: String
  civility: Civility
  phonenumber: String
  firstname: String
  lastname: String
  shipments: [Shipment]
}

type PaginatedDeliveryMan{
  count: Int
  deliveryMans: [DeliveryMan]
}

union DeliveryManResult = DeliveryMan | InputError

type Shipment{
  id: Int
  shipmentTrackingNumber: Int
  shipmentDate: Date
  shipmentDetails: String
  createdat: Date
  updatedat: Date
  order: Order
  orderId: Int 
  shipmentStage: ShipmentStage
  shipmentStageId: Int
  deliveryMan: DeliveryMan
  deliveryManId: Int 
}

type PaginatedShipment{
  count: Int
  shipments: [Shipment]
}

type ShipmentStage{
  id: Int
  stage: String
  desc: String
  nextStage: ShipmentStage
  nextStageId: Int
  createdat: Date
  updatedat: Date
  shipments: [Shipment]
  previous: ShipmentStage
}

type PaginatedShipmentStage{
  count: Int
  shipmentStages: [ShipmentStage]
}

type NotificationsOnUsers{
  id: Int 
  read: Boolean
  user: User
  userId: Int 
  notification: Notification
  notificationId: Int 
}

type Notification{
  id: Int
  text: String
  imageUrl: String
  link: String
  users: [NotificationsOnUsers]
  createdat: Date
  updatedat: Date
}

# Blog types

type Post{
  id: Int
  name: String
  metaTitle: String
  slug: String
  summary: String
  published: Boolean
  createdat: Date
  updatedat: Date
  parent: Post
  parentId: Int
  childs: [Post]
  user: User
  userId: Int
  postCategories: [PostCategoriesOnPosts]
  postTags: [PostTagsOnPosts]
  postMeta: PostMeta
}

type Comment{
  id: Int
  text: String
  published: Boolean
  parent: Comment
  parentId: Int
  childs: [Comment]
  user: User
  userId: Int
  createdat: Date
  updatedat: Date
}

type PostCategoriesOnPosts{
  id: Int
  post: Post
  postId: Int 
  postCategory: PostCategory
  postCategoryId: Int 
  createdat: Date
}

type PostCategory{
  id: Int
  name: String
  desc: String
  posts: PostCategoriesOnPosts
  parent: PostCategory
  parentId: Int
  childs: [PostCategory]
  createdat: Date
  updatedat: Date
}


type PostTagsOnPosts{
  id: Int
  post: Post
  postId: Int 
  postTag: PostTag
  postTagId: Int 
  createdat: Date  
}

type PostTag{
  id: Int
  name: String
  desc: String
  posts: [PostTagsOnPosts]
  parent: PostTag
  parentId: Int
  childs: [PostTag]
  createdat: Date
  updatedat: Date
}

type PostMeta{
  id: Int
  key: String
  createdat: Date
  updatedat: Date
  post: Post
  postId: Int 
}



# Input types definitions

input OptionInput {
  value: String
  colorCode: String
}

input ImageInput {
  url: String
  imageref: String
  default: Boolean
  productId: Int
  optionId: Int
  brandId: Int
}

input CartItemInput {
  id: Int
  unitprice: Float
  discount: Float
  quantity: Int
  active: Boolean
  productId: Int 
  optionId: Int 
}



# Enum and input types definitions

enum Sort {
  asc
  desc
}

enum Civility {
  MONSIEUR
  MADAME
}

enum Gender {
  HOMME
  FEMME
  UNISEX
}

input NewsletterOrderByInput {
  id: Sort
  createdat: Sort
  email: Sort
}

input UserOrderByInput {
  id: Sort
  createdat: Sort
  firstname: Sort
  lastname: Sort
  email: Sort
  phonenumber: Sort
}

input CategoryOrderByInput {
   id: Sort
  createdat: Sort
  name: Sort
  order: Sort
}

input PermissionOrderByInput {
   id: Sort
  createdat: Sort
  name: Sort
}

input RoleOrderByInput {
   id: Sort
  createdat: Sort
  name: Sort
}

input VariantOrderByInput {
  id: Sort
  createdat: Sort
  name: Sort
}

input OptionOrderByInput {
  id: Sort
  createdat: Sort
  value: Sort
}

input ProductOrderByInput {
   id: Sort
  createdat: Sort
  name: Sort
  ranking: Sort
  order: Sort
  likes: Sort
  view: Sort
  unitprice: Sort
}

input DiscountOrderByInput {
   id: Sort
  createdat: Sort
  name: Sort
}

input InventoryOrderByInput {
   id: Sort
  createdat: Sort
  quantity: Sort
}

input CartItemOrderByInput {
   id: Sort
  createdat: Sort
  quantity: Sort
  unitprice: Sort
}

input CountryOrderByInput {
   id: Sort
  createdat: Sort
  iso3: Sort
  isoNum: Sort
  name: Sort
}

input RegionOrderByInput {
   id: Sort
  createdat: Sort
  code: Sort
  name: Sort
}

input DistrictOrderByInput {
   id: Sort
  createdat: Sort
  shipping: Sort
  name: Sort
}

input DistrictsOnUsersOrderByInput {
   id: Sort
  createdat: Sort
  line1: Sort
  name: Sort
}

input OrderOrderByInput {
   id: Sort
  createdat: Sort
  updatedat: Sort
  firstname: Sort
  lastname: Sort
  total: Sort
}

input ShippingMethodOrderByInput {
   id: Sort
  createdat: Sort
  updatedat: Sort
  name: Sort
  code: Sort
}

input ShipmentStageOrderByInput {
   id: Sort
  createdat: Sort
  stage: Sort
}

input DeliveryManOrderByInput {
  id: Sort
  createdat: Sort
  firstname: Sort
  lastname: Sort
  email: Sort
  phonenumber: Sort
}

input BrandOrderByInput {
  id: Sort
  name: Sort
  desc: Sort
  order: Sort
}


