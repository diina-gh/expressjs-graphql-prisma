type Query {
  info: String!
  #Auth's Queries
  users(filter: String, skip: Int, take: Int, orderBy: UserOrderByInput): [User!]!
  user(id: Int): [User!]!
  #Newsletters's Queries
  newsletters(filter: String, skip: Int, take: Int, orderBy: NewsletterOrderByInput): [Newsletter!]!
  newsletter(id: Int): [Newsletter!]!
  #Categories's Queries
  categories(filter: String, skip: Int, take: Int, orderBy: CategoryOrderByInput): [Category!]!
  category(id: Int): [Category!]!
  #Permission's Queries
  permissions(filter: String, skip: Int, take: Int, orderBy: PermissionOrderByInput): [Permission!]!
  permission(id: Int): [Permission!]!
  #Permission's Queries
  roles(filter: String, skip: Int, take: Int, orderBy: RoleOrderByInput): [Role!]!
  role(id: Int): [Role!]!
  #Variant's Queries
  variants(filter: String, skip: Int, take: Int, orderBy: VariantOrderByInput): [Variant!]!
  variant(id: Int): [Variant!]!
  #Variant's Queries
  products(filter: String, skip: Int, take: Int, orderBy: ProductOrderByInput): [Product!]!
  product(id: Int): [Product!]!
  #Variant's Queries
  discounts(filter: String, skip: Int, take: Int, orderBy: DiscountOrderByInput): [Discount!]!
  discount(id: Int): [Discount!]!
  #Variant's Queries
  inventories(filter: String, skip: Int, take: Int, orderBy: InventoryOrderByInput): [Inventory!]!
  inventory(id: Int): [Inventory!]!
}

type Mutation {
  #Auth's Mutations
  signup(firstname: String, lastname: String, email: String, password: String,repassword: String, phonenumber: String ): AuthPayload
  login(email: String, password: String): AuthPayload
  #Newsletter's mutations
  saveNewsletter(id:Int, email: String): Newsletter!
  deleteNewsletter(id:Int): Newsletter!
  #Category's mutations
  saveCategory(id:Int, name: String!, desc: String!, long_desc: String, order: Int!, parentId: Int, updatedat: String): Category!
  deleteCategory(id:Int): Category!
  #Permission's mutations
  savePermission(id:Int, title: String, desc:String): Permission!
  deletePermission(id:Int): Permission!
  #Role's mutations
  saveRole(id:Int, title: String, desc:String, permissions:[Int]): Role!
  deleteRole(id:Int): Role!
  #Role's mutations
  saveVariant(id:Int, title: String, desc:String, options:[OptionInput]): Variant!
  deleteVariant(id:Int): Variant!
  #Role's mutations
  saveProduct(id:Int, sku: String, name:String, short_desc: String, long_desc: String, status: Int , activated: Boolean, unit: String, unitweight: Float, unitprice: Float, taxable: Boolean, order: Int, categoryId: Int, discountId: Int, images:[ImageInput] ,variants:[Int], options:[Int]): Product!
  deleteProduct(id:Int): Product!
  #Discount's mutations
  saveDiscount(id:Int, title: String, desc:String, percent: Float, products:[Int]): Discount!
  deleteDiscount(id:Int): Discount!
  #Discount's mutations
  saveInventory(id:Int, quantity:Int, productId:Int, details:String): Inventory!
  deleteInventory(id:Int): Inventory!
}


# Scalar

scalar Date
scalar Time
scalar DateTime


# Type definitions

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  email: String!
  phonenumber: String
  firstname: String
  lastname: String
  emailVerified: Boolean
  enabled: Boolean
  lastlogin: String
  password: String
  imageurl: String
  imagesrc: String
  RolesOnUsers: [RolesOnUsers]
  createdat: Date
}

type Role {
  id: ID!
  title: String
  desc: String
  RolesOnUsers: [RolesOnUsers]
  permissions: [PermissionsOnRoles]
}

type Permission {
  id: ID!
  title: String
  desc: String
  createdat: Date
  updatedat: Date
  roles: [PermissionsOnRoles]
  count: Int
}


type RolesOnUsers {
  user: User
  userId: Int 
  role: Role
  roleId: Int 
  assignedAt: Date
  assignedById: Int
}

type PermissionsOnRoles {
  permission: Permission 
  permissionId: Int 
  role: Role
  roleId: Int 
  assignedAt: Date
  assignedById: Int
}

type Category{
  id: ID!
  name: String
  desc: String
  long_desc: String
  order: Int
  createdat: Date
  updatedat: Date
  products: [Product]
  parent: Category
  parentId: Int
  childs: [Category]
}

type Product {
  id: ID!
  sku: String
  name: String
  short_desc: String
  long_desc: String
  status: Int
  activated: Boolean
  unit: String
  unitweight: Float
  unitprice: Float
  taxable: Boolean
  ranking: Int
  order: Int
  likes: Int
  views: Int
  createdat: String
  updatedat: String 
  images: [Image]
  category: Category
  categoryId:Int
  discount: Discount
  discountId: Int
  variants: [VariantsOnProducts]
  options: [OptionsOnProducts]
  inventory: Inventory
}

type Inventory {
  id: ID!
  createdat: String
  updatedat: String 
  quantity: Int
  details: String
  product: Product
  productId: Int
}

type Discount {
  id: ID!
  title: String
  desc: String
  percent: Float
  enabled: Boolean
  createdat: Date
  updatedat: Date 
  products: [Product]
}

type Image {
  id: ID!
  url: String
  imageref: String
  default: Boolean
  product: Product
  productId: Int
  option: Option
  optionId: Int
}

type VariantsOnProducts {
  product: Product
  productId: Int 
  variant: Variant
  variantId: Int 
  assignedAt: Date
}

type Variant {
  id: ID!
  title: String
  desc: String
  createdat: Date
  updatedat: Date 
  options: [Option]
  products: [VariantsOnProducts]
}

type Option {
  id: ID!
  value: String
  colorCode: String
  variant: Variant
  variantId: Int
  products: [OptionsOnProducts]
  images: [Image]
}

type OptionsOnProducts {
  option: Option
  optionId: Int 
  product: Product
  productId: Int 
  assignedAt: Date
}

type Newsletter {
  id: ID!
  email: String
  createdat: Date
}

type Cart {
  id: Int
  token: String   
  status: Int
  createdat: Date
  updatedat: Date
  cartItems: [CartItem]
  user: User
  userId: Int 
}

type CartItem {
  id: Int
  token: String   
  status: Int
  sku: String
  unitprice: Float
  discount: Float
  quantity: Int
  active: Boolean
  createdat: Date
  updatedat: Date
  product: Product
  productId: Int 
  cart: Cart
  cartId: Int 
}

type Transaction{
  id: Int
  code: String
  type: Int
  mode: Int
  status: Int
  createdat: Date
  updatedat: DateTime
  user: User
  userId: Int 
  order: Order
  orderId: Int 
}

type Order{
  id: Int 
  token: String   
  status: Int
  subTotal: Float
  itemDiscount: Float
  tax: Float
  total: Float
  promo: String
  discount: Float
  grandTotal: Float
  fistname: String
  lastname: String
  phonenumber: String
  email: String
  createdat: Date
  updatedat: Date
  user: User
  userId: Int 
  districts: [DistrictsOnOrders]
  transactions: [Transaction]
  shipment: Shipment
}

type OrderItem{
  id: Int
  product: Product
  productId: Int
  unitprice: Float
  quantity: Int
  discount: Float 
  createdat: Date
  updatedat: Date
}

type DistrictsOnOrders{
  order: Order
  orderId: Int 
  district: District
  districtId: Int 
  line1: String
  line2: String
  assignedAt: Date
}

type DistrictsOnUsers{
  user: User
  userId: Int 
  district: District
  districtId: Int 
  line1: String
  line2: String
  assignedAt: Date
}


type District{
  id: Int
  name: String
  shipping: Float
  region: Region
  regionId: Int 
  createdat: Date
  updatedat: Date
  orders: [DistrictsOnOrders]
  users: [DistrictsOnUsers]
}

type Region{
  id: Int
  code: String
  name: String
  createdat: Date
  updatedat: Date
  country: Country
  countryId: Int 
  districts: [District]
}

type Country{
  id: Int
  iso3: String  
  isoNum: String 
  name: String
  createdat: Date
  updatedat: Date
  regions: [Region]
}


type Shipment{
  id: Int
  shipmentTrackingNumber: Int
  shipmentDate: Date
  shipmentDetails: String
  createdat: Date
  updatedat: Date
  order: Order
  orderId: Int 
  shipmentStage: ShipmentStage
  shipmentStageId: Int
}

type ShipmentStage{
  id: Int
  stage: String
  desc: String
  nextStage: ShipmentStage
  previousStage: ShipmentStage
  nextStageId: Int
  createdat: Date
  updatedat: Date
  shipments: [Shipment]
}


type NotificationsOnUsers{
  id: Int 
  read: Boolean
  user: User
  userId: Int 
  notification: Notification
  notificationId: Int 
}


type Notification{
  id: Int
  text: String
  imageUrl: String
  link: String
  users: [NotificationsOnUsers]
  createdat: Date
  updatedat: Date
}

# Blog types

type Post{
  id: Int
  title: String
  metaTitle: String
  slug: String
  summary: String
  published: Boolean
  createdat: Date
  updatedat: Date
  parent: Post
  parentId: Int
  childs: [Post]
  user: User
  userId: Int
  postCategories: [PostCategoriesOnPosts]
  postTags: [PostTagsOnPosts]
  postMeta: PostMeta
}

type Comment{
  id: Int
  text: String
  published: Boolean
  parent: Comment
  parentId: Int
  childs: [Comment]
  user: User
  userId: Int
  createdat: Date
  updatedat: Date
}

type PostCategoriesOnPosts{
  id: Int
  post: Post
  postId: Int 
  postCategory: PostCategory
  postCategoryId: Int 
  createdat: DateTime  
}

type PostCategory{
  id: Int
  title: String
  desc: String
  posts: PostCategoriesOnPosts
  parent: PostCategory
  parentId: Int
  childs: [PostCategory]
  createdat: Date
  updatedat: Date
}


type PostTagsOnPosts{
  id: Int
  post: Post
  postId: Int 
  postTag: PostTag
  postTagId: Int 
  createdat: Date  
}

type PostTag{
  id: Int
  title: String
  desc: String
  posts: [PostTagsOnPosts]
  parent: PostTag
  parentId: Int
  childs: [PostTag]
  createdat: Date
  updatedat: Date
}

type PostMeta{
  id: Int
  key: String
  createdat: DateTime
  updatedat: DateTime
  post: Post
  postId: Int 
}


# Input types definitions

input OptionInput {
  value: String
  colorCode: String
}

input ImageInput {
  url: String
  imageref: String
  default: Boolean
  productId: Int
  optionId: Int
}



# Sorting input types definitions

enum Sort {
  asc
  desc
}

input NewsletterOrderByInput {
  createdat: Sort
  email: Sort
}

input UserOrderByInput {
  createdat: Sort
  firstname: Sort
  lastname: Sort
}

input CategoryOrderByInput {
  createdat: Sort
  name: Sort
  order: Sort
}

input PermissionOrderByInput {
  createdat: Sort
  title: Sort
}

input RoleOrderByInput {
  createdat: Sort
  title: Sort
}

input VariantOrderByInput {
  createdat: Sort
  title: Sort
}

input ProductOrderByInput {
  createdat: Sort
  name: Sort
  ranking: Sort
  order: Sort
  likes: Sort
  view: Sort
  unitprice: Sort
}

input DiscountOrderByInput {
  createdat: Sort
  title: Sort
}

input InventoryOrderByInput {
  createdat: Sort
  quantity: Sort
}