datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(100)
  token         String?  @unique
  phonenumber   String?  @db.VarChar(100)
  firstname     String?  @db.VarChar(100)
  lastname      String?  @db.VarChar(100)
  emailVerified Boolean  @default(false)
  enabled       Boolean  @default(false)
  lastlogin     DateTime?
  password      String?   @db.VarChar(200)
  imageurl      String?   @db.VarChar(200)
  imagesrc      String?   @db.VarChar(200)
  admin         Boolean   @default(false)
  vendor        Boolean   @default(false)
  roles         RolesOnUsers[]
  cart          Cart?
  districts     DistrictsOnUsers[]
  orders        Order[]
  transactions  Transaction[]
}

model RolesOnUsers {
  user          User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int 
  role          Role?     @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId        Int 
  assignedAt    DateTime @default(now())
  assignedById  Int
  @@id([userId, roleId])
}

model Role {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200) @unique
  desc        String?   @db.VarChar(400)
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  users       RolesOnUsers[]
  permissions PermissionsOnRoles[]
}

model PermissionsOnRoles {
  permission      Permission?  @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permissionId    Int 
  role            Role?     @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId          Int 
  assignedAt      DateTime @default(now())
  assignedById    Int
  @@id([roleId, permissionId])
}

model Permission {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(200) @unique
  desc        String   @db.VarChar(400)
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  roles       PermissionsOnRoles[]
}

model Category{
  id          Int      @id @default(autoincrement())
  name        String   @unique 
  desc        String
  long_desc   String?
  order       Int?
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  products    Product[]
  parentId    Int?
  parent      Category?   @relation("ParentChilds", fields: [parentId], references: [id])
  childs      Category[]  @relation("ParentChilds")
}

model Product {
  id          Int      @id @default(autoincrement())
  sku         String?
  name        String  
  short_desc  String
  long_desc   String?
  status      Int?
  activated   Boolean @default(false)
  unit        String?
  unitweight  Decimal?
  unitprice   Decimal?
  taxable     Boolean @default(false)
  ranking     Int?
  order       Int?
  likes       Int?
  views       Int?
  createdat   DateTime @default(now())
  updatedat   DateTime?
  images      Image[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  discount    Discount? @relation(fields: [discountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  discountId  Int?
  variants    VariantsOnProducts[]
  options     OptionsOnProducts[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  inventory   Inventory?
}

model Inventory {
  id          Int      @id @default(autoincrement())
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  details     String?
  quantity    Int
  product     Product @relation(fields: [productId], references: [id])
  productId   Int @unique
}

model Discount {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  desc        String
  percent     Decimal
  enabled     Boolean   @default(false)
  createdat   DateTime  @default(now())
  updatedat   DateTime?
  products    Product[]
}

// model flashSale {
//     id          Int      @id @default(autoincrement())

// }

model Image {
  id                    Int      @id @default(autoincrement())
  url                   String
  imageref              String
  default               Boolean  @default(false)
  product               Product? @relation(fields: [productId], references: [id])
  productId             Int?
  option                Option? @relation(fields: [optionId], references: [id])
  optionId              Int?
  // productId Int
}


model VariantsOnProducts {
  product         Product?     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       Int 
  variant         Variant?     @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  variantId       Int 
  assignedAt      DateTime @default(now())
  @@id([variantId, productId])
}


model Variant {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  desc        String
  createdat   DateTime @default(now())
  updatedat   DateTime?
  options     Option[]
  products    VariantsOnProducts[]
}

model Option {
  id          Int      @id @default(autoincrement())
  value       String
  colorCode   String?
  variant     Variant  @relation(fields: [variantId], references: [id],  onUpdate: Cascade, onDelete: Cascade)
  variantId   Int
  products    OptionsOnProducts[]
  images      Image[]
}

model OptionsOnProducts {
  option          Option?      @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  optionId        Int 
  product         Product?     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       Int 
  assignedAt      DateTime    @default(now())
  @@id([optionId, productId])
}

model Newsletter {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  createdat   DateTime @default(now())
}


model Cart {
  id          Int      @id @default(autoincrement())
  token       String   
  status      Int
  createdat   DateTime @default(now())
  updatedat   DateTime
  cartItems   CartItem[]
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int 
}

model CartItem {
  id          Int      @id @default(autoincrement())
  token       String   
  status      Int
  sku         String?
  unitprice   Float
  discount    Float?
  quantity    Int
  active      Boolean  @default(false)
  createdat   DateTime @default(now())
  updatedat   DateTime
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int 
  cart        Cart     @relation(fields: [cartId], references: [id])
  cartId      Int 
}

model Transaction{
  id            Int        @id @default(autoincrement())
  code          String?
  type          Int?
  mode          Int?
  status        Int?
  createdat     DateTime    @default(now())
  updatedat     DateTime?
  user          User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int 
  order         Order?      @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId       Int 
}

model Order{
  id            Int      @id @default(autoincrement())
  token         String   
  status        Int
  subTotal      Float
  itemDiscount  Float?
  tax           Float?
  total         Float?
  promo         String?
  discount      Float?
  grandTotal    Float?
  fistname      String?
  lastname      String?
  phonenumber   String?
  email         String?
  createdat     DateTime @default(now())
  updatedat     DateTime?
  user          User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int 
  districts     DistrictsOnOrders[]
  transactions  Transaction[]
}

model  OrderItem{
  id            Int      @id @default(autoincrement())
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
  unitprice     Float
  quantity      Int
  discount      Float 
  createdat     DateTime @default(now())
  updatedat     DateTime?
}

model DistrictsOnOrders{
  order           Order?       @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId         Int 
  district        District?     @relation(fields: [districtId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  districtId      Int 
  line1           String?
  line2           String?
  assignedAt      DateTime     @default(now())
  @@id([orderId, districtId])
}

model DistrictsOnUsers{
  user            User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId          Int 
  district        District?    @relation(fields: [districtId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  districtId      Int 
  line1           String?
  line2           String?
  assignedAt      DateTime     @default(now())
  @@id([userId, districtId])
}


model District{
  id            Int      @id @default(autoincrement())
  name          String
  shipping      Float?
  region        Region   @relation(fields: [regionId], references: [id])
  regionId      Int 
  createdat     DateTime @default(now())
  updatedat     DateTime?
  orders        DistrictsOnOrders[]
  users         DistrictsOnUsers[]
}

model Region{
  id            Int      @id @default(autoincrement())
  code          String   @db.Char(2)
  name          String
  createdat     DateTime @default(now())
  updatedat     DateTime?
  country       Country     @relation(fields: [countryId], references: [id])
  countryId     Int 
  districts     District[]
}

model Country{
  id            Int      @id @default(autoincrement())
  iso3          String   @db.Char(3)
  isoNum        String   @db.Char(3)
  name          String
  createdat     DateTime @default(now())
  updatedat     DateTime?
  regions       Region[]
}


