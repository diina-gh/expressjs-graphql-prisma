datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(100)
  token         String?  @unique
  phonenumber   String?  @db.VarChar(100)
  firstname     String?  @db.VarChar(100)
  lastname      String?  @db.VarChar(100)
  emailVerified Boolean  @default(false)
  enabled       Boolean  @default(false)
  lastlogin     DateTime?
  password      String?   @db.VarChar(200)
  admin         Boolean   @default(false)
  vendor        Boolean   @default(false)
  roles         RolesOnUsers[]
  cart          Cart?
  districts     DistrictsOnUsers[]
  orders        Order[]
  transactions  Transaction[]
  posts         Post[]
  comments      Comment[]
  notifications NotificationsOnUsers[]
  image       Image?

}

model RolesOnUsers {
  user          User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int 
  role          Role?     @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId        Int 
  assignedAt    DateTime @default(now())
  assignedById  Int
  @@id([userId, roleId])
}

model Role {
  id          Int      @id @default(autoincrement())
  name       String   @db.VarChar(200) @unique
  desc        String?   @db.VarChar(400)
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  users       RolesOnUsers[]
  permissions PermissionsOnRoles[]
}

model PermissionsOnRoles {
  permission      Permission?  @relation(fields: [permissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  permissionId    Int
  role            Role?     @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  roleId          Int 
  assignedAt      DateTime @default(now())
  assignedById    Int
  @@id([roleId, permissionId])
}

model Permission {
  id          Int      @id @default(autoincrement())
  name       String   @db.VarChar(200) @unique
  desc        String   @db.VarChar(400)
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  roles       PermissionsOnRoles[]
}

model Category{
  id          Int      @id @default(autoincrement())
  name        String   @unique 
  desc        String
  long_desc   String?
  order       Int?
  activated   Boolean @default(false)
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  products    Product[]
  parentId    Int?
  parent      Category?   @relation("ParentChilds", fields: [parentId], references: [id])
  childs      Category[]  @relation("ParentChilds")
  image       Image?
}

model Brand{
  id          Int      @id @default(autoincrement())
  name        String    
  desc        String
  order       Int?
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  products    Product[]
  image       Image?
}

model Product {
  id          Int      @id @default(autoincrement())
  sku         String?
  name        String  
  desc        String
  details     String?
  status      Int?
  activated   Boolean @default(false)
  unit        String?
  unitweight  Decimal?
  unitprice   Decimal?
  taxable     Boolean @default(false)
  ranking     Int?
  order       Int?
  likes       Int?
  views       Int?
  createdat   DateTime @default(now())
  updatedat   DateTime?
  images      Image[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  brand       Brand?   @relation(fields: [brandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  brandId     Int?
  discount    Discount? @relation(fields: [discountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  discountId  Int?
  variants    VariantsOnProducts[]
  options     OptionsOnProducts[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  inventory   Inventory?
  relatedId   Int?
  related     Product?   @relation("RelatedProducts", fields: [relatedId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  relatives   Product[]   @relation("RelatedProducts")
  gender      String?
}

model Inventory {
  id          Int      @id @default(autoincrement())
  createdat   DateTime @default(now())
  updatedat   DateTime? 
  details     String?
  quantity    Int
  product     Product @relation(fields: [productId], references: [id])
  productId   Int @unique
}

model Discount {
  id          Int       @id @default(autoincrement())
  name       String    @unique
  desc        String
  percent     Decimal
  enabled     Boolean   @default(false)
  createdat   DateTime  @default(now())
  updatedat   DateTime?
  products    Product[]
}

// model flashSale {
//     id          Int      @id @default(autoincrement())

// }

model Image {
  id                    Int      @id @default(autoincrement())
  url                   String
  imageref              String
  default               Boolean  @default(false)
  product               Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId             Int?
  option                Option? @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  optionId              Int?
  brand                 Brand? @relation(fields: [brandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  brandId               Int?
  category              Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId            Int?
  user                  User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId                Int?
  createdat             DateTime @default(now())
  updatedat             DateTime?
}


model VariantsOnProducts {
  product         Product?     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       Int 
  variant         Variant?     @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  variantId       Int 
  assignedAt      DateTime @default(now())
  @@id([variantId, productId])
}


model Variant {
  id          Int      @id @default(autoincrement())
  name       String   @unique
  desc        String
  createdat   DateTime @default(now())
  updatedat   DateTime?
  options     Option[]
  products    VariantsOnProducts[]
}

model Option {
  id          Int      @id @default(autoincrement())
  value       String
  colorCode   String?
  variant     Variant  @relation(fields: [variantId], references: [id],  onUpdate: Cascade, onDelete: Cascade)
  variantId   Int
  products    OptionsOnProducts[]
  images      Image[]
}

model OptionsOnProducts {
  option          Option?      @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  optionId        Int 
  product         Product?     @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId       Int 
  sku             String?
  assignedAt      DateTime    @default(now())
  cartItems       CartItem[]
  orderItems      OrderItem[]
  @@id([optionId, productId])
}

model Newsletter {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  createdat   DateTime @default(now())
}


model Cart {
  id          Int      @id @default(autoincrement())
  status      Int?
  createdat   DateTime @default(now())
  updatedat   DateTime?
  cartItems   CartItem[]
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      Int @unique
}

model CartItem {
  id          Int      @id @default(autoincrement())
  status      Int?
  unitprice   Float
  discount    Float?
  quantity    Int
  active      Boolean  @default(false)
  createdat   DateTime @default(now())
  updatedat   DateTime?
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int 
  cart        Cart?    @relation(fields: [cartId], references: [id])
  cartId      Int?
  optionsOnProducts  OptionsOnProducts?  @relation(fields: [optionId, productId], references: [optionId, productId], onUpdate: Cascade, onDelete: Cascade)
  optionId  Int 
}

model Transaction{
  id            Int        @id @default(autoincrement())
  code          String?
  type          Int?
  mode          Int?
  status        Int?
  createdat     DateTime    @default(now())
  updatedat     DateTime?
  user          User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int 
  order         Order?      @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId       Int 
}

model Order{
  id                Int      @id @default(autoincrement())
  token             String?   
  status            Int
  subTotal          Float
  tax               Float?
  total             Float?
  shipping          Float?
  promo             String?
  discount          Float?
  firstname         String?
  lastname          String?
  phonenumber       String?
  email             String?
  createdat         DateTime @default(now())
  updatedat         DateTime?
  user              User?       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId            Int 
  transactions      Transaction[]
  shipment          Shipment?
  line1             String?
  line2             String?
  district          District? @relation(fields: [districtId], references: [id])
  districtId        Int?
  shippingMethod    ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId  Int?
  orderItems        OrderItem[]
}

model  OrderItem{
  id            Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
  unitprice     Float
  quantity      Int
  discount      Float 
  createdat     DateTime @default(now())
  updatedat     DateTime?
  optionsOnProducts  OptionsOnProducts?  @relation(fields: [optionId, productId], references: [optionId, productId], onUpdate: Cascade, onDelete: Cascade)
  optionId  Int 
}

model DistrictsOnUsers{
  id            Int      @id @default(autoincrement())
  user            User?        @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId          Int 
  district        District?    @relation(fields: [districtId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  districtId      Int 
  default         Boolean      @default(false)
  line1           String?
  line2           String?
  assignedAt      DateTime     @default(now())
  // @@id([userId, districtId])
}


model District{
  id            Int      @id @default(autoincrement())
  name          String   
  shipping      Float?
  region        Region   @relation(fields: [regionId], references: [id])
  regionId      Int 
  createdat     DateTime @default(now())
  updatedat     DateTime?
  users         DistrictsOnUsers[]
  orders        Order[]
}

model Region{
  id            Int      @id @default(autoincrement())
  code          String   @db.Char(2)
  name          String
  createdat     DateTime @default(now())
  updatedat     DateTime?
  country       Country     @relation(fields: [countryId], references: [id])
  countryId     Int 
  districts     District[]
}

model Country{
  id            Int      @id @default(autoincrement())
  iso3          String   @db.Char(3) @unique
  isoNum        String   @db.Char(3) @unique
  name          String   @unique
  createdat     DateTime @default(now())
  updatedat     DateTime?
  regions       Region[]
}

model ShippingMethod{
    id          Int      @id @default(autoincrement())
    code        String?  @unique
    name        String?  
    desc        String?  
    orders      Order[]
    createdat   DateTime @default(now())
    updatedat   DateTime?
}

model DeliveryMan{
  id            Int      @id @default(autoincrement())
  civility      String?
  email         String   @unique @db.VarChar(100)
  phonenumber   String?  @db.VarChar(100)
  firstname     String?  @db.VarChar(100)
  lastname      String?  @db.VarChar(100)
  createdat     DateTime @default(now())
  updatedat     DateTime?
  shipments     Shipment[]
}


model Shipment{
  id                       Int      @id @default(autoincrement())
  shipmentTrackingNumber   Int
  shipmentDate             DateTime?
  shipmentDetails          String
  createdat                DateTime @default(now())
  updatedat                DateTime?
  order                    Order?       @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId                  Int 
  shipmentStage            ShipmentStage?    @relation(fields: [shipmentStageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  shipmentStageId          Int
  deliveryMan              DeliveryMan?      @relation(fields: [deliveryManId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  deliveryManId            Int 
}

model ShipmentStage{
  id                       Int      @id @default(autoincrement())
  stage                    String
  desc                     String?
  nextStage                ShipmentStage?  @relation("NextShipmentStage", fields: [nextStageId], references: [id])
  nextStageId              Int?
  createdat                DateTime @default(now())
  updatedat                DateTime?
  shipments                Shipment[]
  previous                 ShipmentStage? @relation("NextShipmentStage")
}


model NotificationsOnUsers{
  id                       Int              @id @default(autoincrement())
  read                     Boolean          @default(false)
  user                     User?            @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId                   Int 
  notification             Notification?    @relation(fields: [notificationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  notificationId           Int 
}


model Notification{
  id                       Int      @id @default(autoincrement())
  text                     String
  imageUrl                 String?
  link                     String?
  users                    NotificationsOnUsers[]
  createdat                DateTime @default(now())
  updatedat                DateTime?
}


// Blog Database design

model Post{
  id            Int       @id @default(autoincrement())
  name         String?
  metaTitle     String?
  slug          String?
  summary       String?
  published     Boolean?
  createdat     DateTime  @default(now())
  updatedat     DateTime?
  parent        Post?     @relation("PostParentChilds", fields: [parentId], references: [id])
  parentId      Int?
  childs        Post[]    @relation("PostParentChilds")
  user          User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int?
  postCategories PostCategoriesOnPosts[]
  postTags      PostTagsOnPosts[]
  postMeta      PostMeta?
}

model Comment{
  id            Int       @id @default(autoincrement())
  text          String
  published     Boolean   @default(false)
  parent        Comment?  @relation("CommentParentChilds", fields: [parentId], references: [id])
  parentId      Int?
  childs        Comment[] @relation("CommentParentChilds")
  user          User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId        Int?
  createdat     DateTime  @default(now())
  updatedat     DateTime?
}

model PostCategoriesOnPosts{
  id              Int               @id @default(autoincrement())
  post            Post              @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId          Int 
  postCategory    PostCategory?     @relation(fields: [postCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postCategoryId  Int 
  createdat       DateTime          @default(now())   
}

model PostCategory{
  id            Int       @id @default(autoincrement())
  name         String
  desc          String?
  posts         PostCategoriesOnPosts[]
  parent        PostCategory?  @relation("PostCategoryParentChilds", fields: [parentId], references: [id])
  parentId      Int?
  childs        PostCategory[] @relation("PostCategoryParentChilds")
  createdat     DateTime  @default(now())
  updatedat     DateTime?
}


model PostTagsOnPosts{
  id              Int               @id @default(autoincrement())
  post            Post              @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId          Int 
  postTag         PostTag?          @relation(fields: [postTagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postTagId       Int 
  createdat       DateTime          @default(now())   
}

model PostTag{
  id            Int       @id @default(autoincrement())
  name         String
  desc          String?
  posts         PostTagsOnPosts[]
  parent        PostTag?  @relation("PostTagParentChilds", fields: [parentId], references: [id])
  parentId      Int?
  childs        PostTag[] @relation("PostTagParentChilds")
  createdat     DateTime  @default(now())
  updatedat     DateTime?
}

model PostMeta{
  id            Int         @id @default(autoincrement())
  key           String?
  createdat     DateTime    @default(now())
  updatedat     DateTime?
  post          Post        @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId        Int 
}